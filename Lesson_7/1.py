"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. По возможности доработайте алгоритм (сделайте его умнее).
"""
import timeit

def bubble_sort(orig_list):
    n = 1
    while n < len(orig_list):
        for i in range(len(orig_list)-n):
            if orig_list[i] > orig_list[i+1]:
                orig_list[i],orig_list[i+1] = orig_list[i+1],orig_list[i]
        n += 1
    return orig_list


def my_bubble(lst):
    for i in range(len(lst)-1):
        for j in range(len(lst)-i-1):
            if lst[j] < lst[j+1]:
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return lst


lst200 = [-100, 17, 87, -42, -60, 79, -24, -19, 38, 98, -51, 28, -80, 49, -33, 98, -20, 39, -40, -48, 18, 67, 60, -92, -59, 79, -59, -38, 95, 94, -54, -74, 3, -40, -88, 69, -70, 14, -3, -68, -81, -3, -98, -10, 48, 76, -99, -51, 48, -69, -60, -59, 98, -3, -21, -52, -82, 64, 48, -78, -47, -18, 30, 1, 14, 3, 6, 64, -44, -22, 39, -4, -17, -70, 64, -64, 5, -73, -78, 30, -13, -40, -65, 45, 51, 46, 69, 58, 78, 32, 19, -39, -18, 55, -36, -59, -8, 17, 33, -83, 2, 83, 86, -26, 78, -95, -44, 7, -97, -42, 68, 87, -57, 71, 42, 100, -13, -3, 42, -56, 79, 62, 21, 13, 87, 55, 11, -90, -29, -50, 97, 25, -78, 18, 33, -98, 58, -87, -19, -56, -25, -36, 73, 7, 38, -17, 86, -23, 69, -9, 12, -92, -78, 28, -87, 65, 49, 37, 15, 96, 54, -69, 16, -54, 5, -8, 98, -48, -65, -92, 80, 76, -99, -88, -18, 86, 69, -23, 89, 7, 89, 45, -2, 1, 44, -13, 52, -100, -99, 61, -66, 6, -81, -34, -36, -63, 74, -41, -18, -63]


lst = lst200.copy()
print(lst)
print(bubble_sort(lst))
print('')

print(lst200)
lst = lst200.copy()
print(my_bubble(lst))
print('')


print(timeit.timeit(f'bubble_sort({lst200})', setup="from __main__ import bubble_sort", number=10000))
# результат 66.009767537
print(timeit.timeit(f'my_bubble({lst200})', setup="from __main__ import my_bubble", number=10000))
# результат 63.19073530099999

'''
Первым я использовал алгоритм с урока, второй - мой алгоритм.
Мой алгоритм получился несколько более эффективным, так как, по всей видимости, цикл for работает быстрее, чем while
'''